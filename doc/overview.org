### -*- mode: org; -*-
#+STARTUP: hidestars #+STARTUP: odd #+STARTUP: logdone #+STARTUP: nofninline
#+STYLE: <link rel="stylesheet" type="text/css" href="style.css" />

Overview of desire, a software knowledge and distribution system
#+BEGIN_CENTER
November 5, 2009, 03:16
#+END_CENTER

* About this document

This document has a canonical location:

	http://www.feelingofgreen.ru/shared/git/desire/doc/overview.html

or, for the Org-mode source:

	http://www.feelingofgreen.ru/shared/git/desire/doc/overview.org

* What is desire (supposed to be)?

The domain of desire includes software distribution points, software
modules and applications.  All these terms are represented internally
in a detailed, comprehensive manner, and full knowledge about them is
maintained in a PRINT/READ-able form, and is easily transportable[1]
between desire nodes.

There are three sides of desire:
     -  a knowledge base about world of software,
     -  maximally streamlined software retrieval, and
     -  redistribution.

Desire shares concepts with and provides features like, at least:
     -  asdf-install
     -  mudballs
     -  clbuild

Desire uses the Git distributed version control system to pass around
the domain-specific information, as well as for software redistribution,
and tries not to lose the 'distributed' part of it.  Ideally, desire would
ease distributed, cross-project cooperation and coordinated release making.

* How to obtain desire?

Desire can be obtained at:

        git://git.feelingofgreen.ru/desire

but please see [[Streamlined%20bootstrap][streamlined bootstrap]].

* Overview of terms
*** Distributors

The largest unit of software granularity is a 'distributor', which
corresponds to an internet domain name[3].  Currently, they don't carry
much information beyond just that.

Distributors contain one or more 'remotes', which are typical points
of distribution corresponding to sets of similarly-named repositories.

***** Wishmaster

'Wishmaster' is a subtype of distributor which participates in the
desire network, in the form of having a 'gate remote', upon which
we will elaborate further below.

This participation is twofold -- information passing and module
conversion (better term?).

The information exchanged is that of wishmaster ideas about the world
of software, that is, about all terms covered in this section.

The module conversion serves to simplify life of average desire users
by repackaging modules available through a variety of distribution
means into a common DVCS format.

*** Remotes

The concept of remote serves (or actually, the more general type of
location does) as a point of distribution for a group of modules.

Remotes combine following concepts:
     - version control system type (git, darcs, cvs or svn)
     - transport type (native, http or rsync)
     - simple pattern for matching module pathes on the distributor
     - an internet port number

***** Gate remotes

Gate remotes are special remotes which participate in the desire
protocol.  They have a special module called '.meta', which contains
the containing distributor's idea about the world in a special file
with name 'DEFINITIONS'.

The information in this file is subject to propagation in the network
of hosts participating in the desire protocol.

Distributors recorded in these definitions are considered 'well-known'.

Gate remotes have a second purpose: as parts of well-known wishmasters
they serve for redistribution of modules converted by those wishmasters
into a single repository format, currently 'git'.  The modules converted
in such a way are advertised differently from those which are considered
'released' by the containing distributor.

*** Modules

Modules represent units of software, as released by the distributor,
and contain the information remaining to complete the information
provided by less granular concepts to construct a module address.

Modules can be provided by several different remotes of different
distributors.  When retrieval of a module is requested, gate remotes
are preferred above others.

*** Systems

Descending further down we meet systems.
Systems are objects only meant to be relevant in the domain of Common Lisp
software, and more precisely -- to backend system definition facilities,
such as ASDF, XCVB, Mudballs or others[4].

The concept of system introduces inter-system dependencies, which cross
module boundaries, producing inter-module dependencies.

Evidently, there can be several systems per module, and also those
can be obscured from the end-user, either intentionally or by unfortunate
accident[5].

Desire handles all these complications and operates on the full
inter-module dependency graph.  It also doesn't store that graph anywhere,
recomputing it instead every time a request for module is performed.

*** Applications

Applications are simple extensions of systems, providing some very
preliminary support for launching applications, potentially simplifiable
to the point of the end-user being able to say "run climacs" and
have everything downloaded, required systems loaded and the application
up and running.

*** Localities

The more general type of 'location' besides remotes also includes
'localities', which serve the same purpose as remotes, but on the local
machine.  Master localities are canonical locations for module repositories
managed by a specific VCS type.

The master git locality is a canonical location for both release and
converted module redistribution.

* API (aka end-user interface)
*** Performing knowledge base queries
      - distributor name &key (if-does-not-exist :error) => distributor ::
      - remote name &key (if-does-not-exist :error) => remote ::
      - module name &key (if-does-not-exist :error) => module ::
      - system name &key (if-does-not-exist :error) => system ::
      - app name &key (if-does-not-exist :error) => app ::
      - locality name &key (if-does-not-exist :error) => locality ::
        Find objects by name.

      - name object => symbol ::
        Yield object's name.

      - url remote-designator &optional module-specifier => string ::
        Compute the URL of a module designated by MODULE-SPECIFIER contained a remote designated by
        REMOTE-DESIGNATOR.

      - apropos-desr string-designator &optional set-designator => <no values> ::
        Like APROPOS, but finds objects from the domain of Desire.

      - apropos-desr-list string-designator &optional set-designator => desirables ::
        Like APROPOS-LIST, but finds objects from the domain of Desire.

      - list-modules => <no values> ::
        List all known modules, with some additional information.

      - module-present-p module-designator &optional (locality (gate =*self*=)) check-when-present-p (check-when-missing-p t) => boolean ::
        Determine whether module designated by MODULE-DESIGNATOR is present in LOCALITY, which defaults
        to the local gate locality.

      - system-loadable-p system-designator &optional (locality (gate =*self*=)) => generalised-boolean ::
        Determine whether system designated by SYSTEM-DESIGNATOR is loadable in LOCALITY, which defaults
        to the local gate locality.

      - module-best-remote module-designator &key (if-does-not-exist :error) => remote ::
        Produce the remote, if any, which will be chosen to satisfy desires for module
        designated by MODULE-DESIGNATOR.

      - module-best-distributor module-designator &key (if-does-not-exist :error) => remote ::
        Produce the distributor, if any, whose remote will be chosen to satisfy desires
        for module designated by MODULE-DESIGNATOR.

      - module-fetch-url module &key allow-self => string ::
        Return the URL which is to be used while fetching MODULE, that is the location of MODULE in the preferred remote.
        When ALLOW-SELF is specified, and non-NIL, remotes within =*SELF*= are not discarded from consideration.

      - touch-module module => boolean, string ::
        Try 'access' MODULE via its preferred remote and return whether the attempt was successful as the primary value,
        and the output of the toucher executable as the secondary value.

*** Initial chores & storage location choice

      - init path &key as (default-wishmasters (list desr:*default-wishmaster*)) => boolean ::
        Initialise Desire with PATH chosen as directory for storage of all VCS-specific locations.
       
        When AS is non-NIL an attempt is made to establish an identity to a defined distributor
        named by the AS keyword.

        This is performed by checking that the locally available set of modules covers every module
        that is claimed to be "well known" to be published by our distributor[6].  When this check
        fails an error is signalled.

      - =*desire-root*= ::
        The root directory containing all VCS-specific locations, set during INIT-time.

*** Making wishes

      - lust &rest module-names => boolean ::
        Make modules with MODULE-NAMES locally available.

      - add-module url &optional module-name &key systemlessp (system-type desr:*default-system-type*) (lust desr:*auto-lust*) => module ::
        Define a new module, with download location specified by URL, and the module's name
        either deduced from the URL, or provided via MODULE-NAME.

        When LUST is non-NIL, the module is localised.

      - update-module module-specifier &optional (locality (gate *self*)) => <no values> ::
        Update a module designated by MODULE-SPECIFIER, possibly specifying the target LOCALITY.

      - =*silently-reset-dirty-repositories*= => boolean ::
        Whenever a dirty repository comes up in a situation which requires a clean one to proceed, quietly reset, or otherwise cleanup the repository,
        without raising any signals.  Defaults to T.

      - =*auto-lust*= => boolean ::
        Whether to automatically LUST the modules during ADD-MODULE.  Defaults to NIL.

      - =*fetch-errors-serious*= => boolean ::
        Whether to raise an error when external executables fail to fetch modules during LUST, DESIRE or UPDATE-MODULE.
        Defaults to NIL.

***** Reader macros for add-module

Following reader macro is enabled by install-add-module-reader:

: #@"u://r.l"
: #@("u://r.l" &optional module-name &key (lust *auto-lust*))

*** Less frequently used functions

      - system-definition system repository-path &key (if-does-not-exist :error) => pathname ::
        Return the pathname of the SYSTEM's definition.
       
      - clear-definitions => <no values> ::
        Forget everything. A subsequent LOAD-DEFINITIONS will be instrumental to continue any productive use.

      - remove-remote remote-designator &key keep-modules => nil ::
        Forget everything associated with a remote specified by REMOTE-DESIGNATOR, optionally, when KEEP-MODULES
        is non-NIL, keeping modules referred by it.

      - remove-module module-designator &key keep-localities => nil ::
        Forget everything associated with module specified by MODULE-DESIGNATOR, including
        its systems and applications.

      - remove-system system-designator => nil ::
        Forget everything associated with the system specified by SYSTEM-DESIGNATOR.

      - save-current-definitions &key seal => <no values> ::
        Write out the current idea about the Desire's domain into DEFINITIONS,
        optionally committing changes, when SEAL is non-NIL.
       
      - load-definitions &key (source *self*) (force-source (eq source *self*)) (metastore (meta-path)) => <no values> ::
        Append definitions currently available in METASTORE to the current idea about
        Desire's domain.

* Workflow
*** Streamlined bootstrap

As another step in achieving user relief, desire includes a booststrap script,
whose canonical permanent location is:

	http://www.feelingofgreen.ru/shared/git/desire/climb.sh

This script performs following operations:

     -  use git to download modules desire depends on, placing them in a
        subdirectory of /tmp,
     -  load and perform an initial setup of desire,
     -  optionally install a desired module and its dependencies;

Climb.sh depends on git and bash. Invoke it like this:

: climb.sh ABSOLUTE-ROOT-PATH [MODULE-NAME [BOOTSTRAP-HOST]]

These arguments have the following semantics:

  1. ABSOLUTE-ROOT-PATH should be an empty, writable filesystem location.
     That is, the exact filename must not exist, but its parent directory
     must exist, and be writable by the invoking user.

  2. The optional MODULE-NAME allows automatic retrieval and installation
     of a certain desired module.  When the module contains a system of
     the same name, that system will be loaded.  When an application with
     a same name incidentally exists within the loaded system, that application
     will be started as well.

  3. BOOTSTRAP-HOST allows choice of a bootstrap host different from
     the default, git.feelingofgreen.ru.  That other host must contain Desire
     and its dependencies published via git-daemon.

The root location will be registered as root directory for per-VCS localities,
serving to satisfy storage needs arising from user module retrieval requests.

The path to the 'git/.asdf-registry/' subdirectory of this root directory
should be pushed into ASDF:*CENTRAL-REGISTRY*, if ASDF is to have access
to modules in the desire's pool after the bootstrap script is exited.

A number of environment variables affect the behavior of climb.sh:

    - EXPLAIN :: Cause the bootstrap script to make desire explain
                 invocations of external programs, once it's loaded and active.
    - VERBOSE :: Further extend desire's verbosity while running external
                 programs.
    - BRANCH :: Check out a branch of desire, other than 'master'.
                A corresponding metastore branch will be checked out.
    - METABRANCH :: Check out a metastore branch different from either the
                    default, 'master', or whatever was specified by the
                    environment variable BRANCH.
    - =DISABLE_DEBUGGER= :: Print a backtrace and exit with an error status,
         on errors during operation of desire, once it's loaded.  The default
         is to invoke a debugger.
    - DEBUG :: Globally enable optimisation for debug for all compiled Lisp code.

*** Normal, non-bootstrap use

The INIT procedure ensures that your desire node is in working order.
    
Depending on whether you run a well-known desire node (that is, a wishmaster)
you need to provide the :AS keyword to INIT:

	(init "/path/to/root/"), for non-well-known mode
or:
	(init "/path/to/root/" :as 'your-node-domain-name), for wishmaster mode

The specified root directory will contain all VCS-specific master localities,
as well as anything module's post-install scripts choose to deliver.
This specified pathname will be stored in the =*DESIRE-ROOT*= global variable,
and will henceforth be referred as such.

Unless you already have a '.meta' module, an initial seed version will be
downloaded for you.  Currently the wishmaster chosen for this is
git.feelingofgreen.ru.

This procedure also determines the available VCS tools, as well as conversion
tools, and determines the set of accessible remotes.

Further, it scans the git locality for known modules, and makes their systems
registered in the ASDF registry.

***** User  aspect

Unless you happen to have some conversion tools, the set of modules available
to your node is restricted to those available via git remotes.

The LUST function serves to initially download and update a set of defined
modules.

APROPOS-DESR and LIST-MODULES provide convenient knowledge base query
facilities. For a wider set of functions, please see section 3.

***** Wishmaster aspect

From the wishmaster point of view (note that this happens the INIT function
also does:

     -  checks that the locally available set of modules covers every module
        that is claimed to be "well known" to be published by our
        distributor[6], otherwise signalling an error
     -  publishes the informations about non-"well known", converted modules
        in the gate remote's DEFINITIONS file

******* External executables required for module conversion
        
The conversion is performed by external programs:

     -  darcs-to-git[7]
     -  git cvs, debian package git-cvs
     -  git svn, debian package git-svn

***** Extending definitions

ADD-MODULE and the accompanying reader macro #@"u://r.l/" is a one-stop
point useful for manual extension of the set of known entities.  The URI
type of the URL must name to the VCS used at the given distribution point,
that is one of 'git', 'http' (which actually means git+http), 'darcs',
'cvs' or 'svn'.

The required super-entities are either found among current definitions,
or created on the spot.

SAVE-CURRENT-DEFINITIONS writes out changes into
<value-of-*DESIRE-ROOT*>/git/.meta/DEFINITIONS

* Shortcomings

Some known problems:

     - consumers of DEFINITIONS execute remote code, essentially
     - SBCL-only
     - ASDF-only
     - Linux-only (might work on other unices)
     - has a non-trivial amount of CL library dependencies, half of them
       not exactly being common
     - calls out to an obscene amount of external executables, thereby only
       being able to guess about failure reasons

-----

* Footnotes

[1] Not entirely, but some merging functionality is already in place.
[3] Actually, sometimes a group of domain names, like in case of sourceforge.
[4] Currently, the only backend system implemented is ASDF.
[5] Recovering such hidden systems complicates construction of full dependency graph in case of ASDF.
[6] This is tied to the concept of well known release locations and differs
from the set of modules converted and reexported in the wishmaster
process.
[7] Available through git://github.com/purcell/darcs-to-git.git/
