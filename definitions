;;; -*- Mode: Lisp -*-
;;;
;;; Distributors
;;;
#D(ANONGIT.FREEDESKTOP.ORG
   :remotes
   (#R(GIT-NATIVE-REMOTE ANONGIT.FREEDESKTOP.ORG
       ((mod) "git" "xorg" "lib" (downstring (name mod)))
       :modules (libpciaccess)))) 
#D(B9.COM
   :remotes
   (#R(GIT-NATIVE-REMOTE B9.COM
       ((mod) (format nil "~A.git" (downstring (name mod))))
       :modules (rt clsql cl-base64 md5 puri)))) 
#D(COMMON-LISP.NET
   :remotes
   (#R(DARCS-HTTP-REMOTE COMMON-LISP.NET
       ((mod) "project" (downstring (module-umbrella mod)) "darcs"
        (downstring (name mod)))
       :modules
       (cffi lw-compat closer-mop clbuild plexippus-xpath climplayer
        bordeaux-threads iterate alexandria))
    #R(CVS-RSYNC-REMOTE COMMON-LISP.NET
       ((mod) "project" (downstring (module-umbrella mod)))
       :modules
       (trivial-gray-streams cl+ssl cljl cl-store ecl stamp linedit eclipse
        beirc slime climacs gsharp closure closure-common zip mcclim
        flexichain))
    #R(SVN-RSYNC-REMOTE COMMON-LISP.NET
       ((mod) "project" (downstring (module-umbrella mod)))
       :modules (graphic-forms cl-irc usocket))
    #R(DARCS-HTTP-REMOTE COMMON-LISP.NET
       ((mod) "project" "clbuild" "mirror" (downstring (name mod)))
       :name common-lisp.net-clbuild
       :modules
       (chipz ironclad ltk net-telent-date parse-number psgraph rfc2388
        split-sequence trivial-sockets salza skippy))
    #R(DARCS-HTTP-REMOTE COMMON-LISP.NET
       ((mod) "~crhodes" (downstring (name mod))) :name common-lisp.net-krystof
       :modules (clx vclos spatial-trees midi))
    #R(GIT-HTTP-REMOTE COMMON-LISP.NET
       ((mod) "~loliveira" "git" (downstring (name mod)))
       :name common-lisp.net-luis :modules (texinfo-docstrings))
    #R(DARCS-HTTP-REMOTE COMMON-LISP.NET
       ((mod) "~loliveira" "darcs" (downstring (name mod)))
       :name common-lisp.net-luis-darcs :modules (babel trivial-features))
    #R(DARCS-HTTP-REMOTE COMMON-LISP.NET
       ((mod) "~dlichteblau" "inofficial" (downstring (name mod)))
       :name common-lisp.net-lichtblauware :modules (mel-base))
    #R(DARCS-HTTP-REMOTE COMMON-LISP.NET
       ((mod) "~loliveira" "ediware" (downstring (name mod)))
       :name common-lisp.net-luis-ediware
       :modules
       (url-rewrite hunchentoot html-template flexi-streams drakma cl-who
        cl-ppcre cl-interpol cl-gd cl-fad chunga cl-unicode capi-overview
        cl-dongle cl-wbxml documentation-template fm-plugin-tools html-extract
        lw-add-ons lw-doc lw-win midgets odd-streams rdnzl regex-plugin
        cl-webdav))
    #R(DARCS-HTTP-REMOTE COMMON-LISP.NET
       ((mod) "project" "clbuild" "mirror" (downstring (name mod)))
       :name common-lisp.net-clbuild-mirror :modules nil))) 
#D(GIT.FEELINGOFGREEN.RU
   :remotes
   (#R(GIT-NATIVE-REMOTE GIT.FEELINGOFGREEN.RU ((mod) (downstring (name mod)))
       :modules
       (pestilence newlib mclinux common-db mcdust-one x86-win32 x86-linux
        winnt-lptaccess mcdbio giveio mdb libmdb doc bin dot-gitignore
        clim-file-selector sb-x86-portio clxs ieee-latex assem regvaldefs
        custom-harness standrei climock humint cl-git climb dwarf
        captured-stream cl-io-elf cl-io-mod bintype clung desire semi-precious
        pergamum)))) 
#D(GIT.SANITYINC.COM
   :remotes
   (#R(GIT-NATIVE-REMOTE GIT.SANITYINC.COM
       ((mod) (format nil "~A" (downstring (name mod))))
       :modules (darcs-to-git)))) 
#D(GIT.TUXEE.NET
   :remotes
   (#R(GIT-NATIVE-REMOTE GIT.TUXEE.NET ((mod) (downstring (name mod)))
       :modules (cl-vectors)))) 
#D(GIT.XACH.COM
   :remotes
   (#R(GIT-NATIVE-REMOTE GIT.XACH.COM
       ((mod) (format nil "~A.git" (downstring (name mod))))
       :modules (zpb-ttf vecto zpng salza2)))) 
#D(REPO.OR.CZ
   :remotes
   (#R(GIT-NATIVE-REMOTE REPO.OR.CZ
       ((mod) (format nil "~A.git" (downstring (name mod))))
       :modules (closure-html cxml darcs2git git)))) 
#D(RVW.DOC.GOLD.AC.UK
   :remotes
   (#R(DARCS-HTTP-REMOTE RVW.DOC.GOLD.AC.UK
       ((mod) "sullivan" "darcs" (downstring (name mod)))
       :modules (spatial-trees midi) :disabled-p t))) 
#D(SBCL.BOINKOR.NET
   :remotes
   (#R(GIT-NATIVE-REMOTE SBCL.BOINKOR.NET ((mod) (downstring (name mod)))
       :modules (sbcl)))) 
#D(SVN.BERLIOS.DE
   :remotes
   (#R(SVN-RSYNC-REMOTE SVN.BERLIOS.DE
       ((mod) (format nil "~A_svn" (downstring (name mod)))) :modules nil))) 
#D(SVN.SOURCEFORGE.NET
   :remotes
   (#R(SVN-RSYNC-REMOTE SVN.SOURCEFORGE.NET
       ((mod) (format nil "~A.svn.sourceforge.net" (downstring (name mod)))
        "svn" (downstring (name mod)))
       :modules (lispbuilder)))) 
#D(WWW.FRACTALCONCEPT.COM
   :remotes
   (#R(SVN-RSYNC-REMOTE WWW.FRACTALCONCEPT.COM
       ((mod) "public" "open-source" (downstring (name mod)))
       :distributor-port 8000 :modules (cl-typesetting cl-pdf)))) 
#D(WWW.LICHTEBLAU.COM
   :remotes
   (#R(GIT-HTTP-REMOTE WWW.LICHTEBLAU.COM
       ((mod) "git" (format nil "~A.git" (downstring (name mod))))
       :modules (atdoc cl-xmpp clim-alerts cloak-build cxml-stp cxml-rng ldapvi specializable)))) 
#D(WWW.PPS.JUSSIEU.FR
   :remotes
   (#R(DARCS-HTTP-REMOTE WWW.PPS.JUSSIEU.FR
       ((mod) "~jch" "software" "repos" (downstring (name mod)))
       :modules (cl-yacc)))) 
#D(YDIRSON.FREE.FR
   :remotes
   (#R(GIT-HTTP-REMOTE YDIRSON.FREE.FR
       ((mod) "soft" "git" (format nil "~A.git" (downstring (name mod))))
       :modules (cvsps)))) 

;;;
;;; Modules
;;;
#M(ALEXANDRIA) 
#M(ASSEM) 
#M(ATDOC)
#M(BABEL) 
#M(BEIRC) 
#M(BIN) 
#M(BINTYPE) 
#M(BORDEAUX-THREADS) 
#M(CAPI-OVERVIEW) 
#M(CAPTURED-STREAM) 
#M(CFFI) 
#M(CHIPZ) 
#M(CHUNGA) 
#M((CL+SSL cl-plus-ssl)) 
#M(CL-BASE64) 
#M(CL-DONGLE) 
#M(CL-FAD) 
#M(CL-GD) 
#M(CL-GIT) 
#M(CL-INTERPOL) 
#M(CL-IO-ELF) 
#M(CL-IO-MOD) 
#M(CL-IRC) 
#M(CL-PDF) 
#M(CL-PPCRE) 
#M(CL-STORE) 
#M(CL-TYPESETTING) 
#M(CL-UNICODE) 
#M(CL-VECTORS) 
#M(CL-WBXML) 
#M(CL-WEBDAV) 
#M(CL-WHO) 
#M(CL-XMPP) 
#M(CL-YACC) 
#M(CLBUILD :systems nil) 
#M(CLIM-ALERTS) 
#M(CLIM-FILE-SELECTOR) 
#M(CLIMACS) 
#M(CLIMB) 
#M(CLIMOCK) 
#M(CLIMPLAYER) 
#M(CLOAK-BUILD) 
#M(DESIRE) 
#M((CLJL cl-jpeg)) 
#M((CLOSER-MOP closer)) 
#M(CLOSURE) 
#M((CLOSURE-COMMON cxml)) 
#M(CLOSURE-HTML) 
#M(CLSQL) 
#M(CLUNG) 
#M(CLX) 
#M(CLXS) 
#M(COMMON-DB :systems (common-db common-db-gui)) 
#M(CUSTOM-HARNESS) 
#M(CVSPS :systems nil) 
#M(CXML) 
#M(CXML-RNG) 
#M(CXML-STP) 
#M(DARCS-TO-GIT :systems nil) 
#M(DARCS2GIT) 
#M(DOC) 
#M(DOCUMENTATION-TEMPLATE) 
#M(DOT-GITIGNORE) 
#M(DRAKMA) 
#M(DWARF) 
#M(ECL :systems nil) 
#M(ECLIPSE) 
#M(FLEXI-STREAMS) 
#M(FLEXICHAIN) 
#M(FM-PLUGIN-TOOLS) 
#M(GIT :systems nil) 
#M(GIVEIO) 
#M(GRAPHIC-FORMS :systems (binary-data graphic-forms-uitoolkit macro-utilities)) 
#M(GSHARP) 
#M(HTML-EXTRACT) 
#M(HTML-TEMPLATE) 
#M(HUMINT) 
#M(HUNCHENTOOT) 
#M(IEEE-LATEX) 
#M(IRONCLAD) 
#M(ITERATE) 
#M(LDAPVI) 
#M(LIBMDB) 
#M(LIBPCIACCESS :systems nil) 
#M(LINEDIT) 
#M(LISPBUILDER :systems (lispbuilder-sdl lispbuilder-sdl-image lispbuilder-sdl-ttf)) 
#M(LTK) 
#M(LW-ADD-ONS) 
#M((LW-COMPAT closer)) 
#M(LW-DOC) 
#M(LW-WIN) 
#M(MCCLIM :systems (clim-examples clim-listener clouseau mcclim)) 
#M(MCDBIO) 
#M(MCDUST-ONE) 
#M(MCLINUX) 
#M(MD5) 
#M(MDB) 
#M(MEL-BASE) 
#M(MIDGETS) 
#M(MIDI) 
#M(NET-TELENT-DATE) 
#M(NEWLIB) 
#M(ODD-STREAMS) 
#M(PARSE-NUMBER) 
#M(PERGAMUM) 
#M(PESTILENCE) 
#M(PLEXIPPUS-XPATH) 
#M(PSGRAPH) 
#M(PURI) 
#M(RDNZL) 
#M(REGEX-PLUGIN) 
#M(REGVALDEFS) 
#M(RFC2388) 
#M(RT) 
#M(SALZA) 
#M(SALZA2) 
#M(SB-X86-PORTIO) 
#M(SBCL :systems nil) 
#M(SEMI-PRECIOUS) 
#M(SKIPPY) 
#M(SLIME :systems (swank)) 
#M(SPATIAL-TREES) 
#M(SPECIALIZABLE) 
#M(SPLIT-SEQUENCE) 
#M(STAMP) 
#M(STANDREI) 
#M(SWANK) 
#M(TEXINFO-DOCSTRINGS) 
#M(TRIVIAL-FEATURES) 
#M((TRIVIAL-GRAY-STREAMS cl-plus-ssl)) 
#M(TRIVIAL-SOCKETS) 
#M(URL-REWRITE) 
#M(USOCKET) 
#M(VECTO) 
#M(WINNT-LPTACCESS) 
#M(X86-LINUX) 
#M(X86-WIN32) 
#M(ZIP) 
#M(ZPB-TTF) 
#M(ZPNG) 

;;;
;;; Systems
;;;
#S(BINARY-DATA :module graphic-forms :relativity
   ("src" "external-libraries" "practicals-1.0.3" "Chapter24")) 
#S(CLIM-EXAMPLES :module mcclim) 
#S(CLIM-LISTENER :module mcclim) 
#S(CLOUSEAU :module mcclim) 
#S(COMMON-DB :module common-db) 
#S(COMMON-DB-GUI :module common-db) 
#S(GRAPHIC-FORMS-UITOOLKIT :module graphic-forms) 
#S(LISPBUILDER-SDL :module lispbuilder) 
#S(LISPBUILDER-SDL-IMAGE :module lispbuilder) 
#S(LISPBUILDER-SDL-TTF :module lispbuilder) 
#S(MACRO-UTILITIES :module graphic-forms :relativity
   ("src" "external-libraries" "practicals-1.0.3" "Chapter08")) 
#S(MCCLIM :module mcclim) 

;;;
;;; Applications
;;;
#A(CLIMACS :system climacs :package climacs :function climacs-rv
   :default-parameters nil) 

;;;
;;; Desires
;;;
nil 